#include "StdAfx.h"
#include "IntegratorFast.h"


#define PI 3.1415926535897932384626433832795028841971
#define PI2 6.28318530717958647692528676656
#define KF_CONV 0.0644735999999999
#define tan_0 0
#define cos_0 1


const double IntegratorFast::nodes[] = {-0.999210123227436,-0.995840525118838,-0.989787895222222,-0.981067201752598,-0.969701788765053,-0.955722255839996,-0.939166276116423,-0.920078476177628,-0.898510310810046,-0.874519922646899,-0.84817198478593,-0.819537526162146,-0.788693739932264,-0.7557237753065849,-0.7207165133557299,-0.683766327381355,-0.644972828489477,-0.60444059704851,-0.562278900753944,-0.518601400058569,-0.473525841761707,-0.427173741583078,-0.379670056576798,-0.331142848268447,-0.281722937423261,-0.231543551376029,-0.180739964873425,-0.129449135396944,-0.07780933394953649,-0.0259597723012478,0.0259597723012475,0.07780933394953619,0.129449135396945,0.180739964873425,0.231543551376029,0.281722937423261,0.331142848268448,0.379670056576797,0.427173741583078,0.473525841761707,0.518601400058569,0.562278900753944,0.60444059704851,0.644972828489477,0.683766327381355,0.7207165133557299,0.7557237753065849,0.788693739932264,0.819537526162146,0.84817198478593,0.874519922646899,0.898510310810046,0.920078476177627,0.939166276116424,0.955722255839996,0.969701788765053,0.981067201752598,0.989787895222222,0.995840525118838,0.999210123227436};
const double IntegratorFast::weights[] = {0.00202681196887378,0.00471272992695272,0.00738993116334546,0.0100475571822879,0.0126781664768157,0.015274618596785,0.0178299010142067,0.0203371207294572,0.0227895169439981,0.0251804776215212,0.027503556749925,0.0297524915007892,0.0319212190192966,0.03400389272494641,0.0359948980510843,0.0378888675692433,0.0396806954523818,0.04136555123558489,0.04293889283593489,0.0443964787957866,0.04573437971611471,0.0469489888489124,0.04803703181997171,0.04899557545575631,0.049822035690551,0.0505141845325093,0.0510701560698553,0.0514884515009809,0.05176794317491009,0.0519078776312198,0.0519078776312194,0.0517679431749094,0.0514884515009812,0.0510701560698546,0.05051418453250919,0.04982203569055041,0.0489955754557564,0.04803703181997189,0.0469489888489116,0.0457343797161143,0.04439647879578651,0.0429388928359353,0.041365551235585,0.0396806954523812,0.0378888675692443,0.0359948980510843,0.0340038927249456,0.031921219019296,0.0297524915007897,0.0275035567499253,0.0251804776215213,0.0227895169439967,0.0203371207294583,0.0178299010142076,0.0152746185967851,0.0126781664768161,0.0100475571822893,0.007389931163346141,0.004712729926953551,0.00202681196887367};
const double IntegratorFast::coeffs[] = {1.00000000001502,-0.0000000003971037387806575,-0.2500000025918557,0.00000004370805323228311,0.01562481926022373,0.0000003746964069017977,-0.0004344981963593569,0.0000003923846648059681,0.000006552041596216036,0.000000097577427433624,-0.0000000985582498286686,0.000000007259332734370126,-0.000000000815801230627031,0.0000000001695776376652846,-0.00000000001859116735850654,0.000000000001055434172075196,-0.00000000000003087777334068834,0.0000000000000003739549721015043};
const int IntegratorFast::n_coeffs = 18;

IntegratorFast::IntegratorFast(double _F,double _dF,double _dF2, double _phi,double _A,double _T,double _Td, double _m)
{
	F = _F;
	dF = _dF;
	dF2 = _dF2;
	phi = _phi;
	A = _A;
	T = _T;
	Td = _Td;
	m = _m;
	for(int i =0; i<n_nodes; i++)
	{
		IntegratorFast::cos_vals[i] = cos(PI*nodes[i]);
		IntegratorFast::cos2_vals[i] = cos(2*PI*nodes[i]);
	}
}


IntegratorFast::~IntegratorFast(void)
{

}

 double IntegratorFast::integrateLegendre( double H, double theta, double lower_limit, double upper_limit)
{
	double total = 0;

	for(int i = n_nodesp5; i < n_nodes; i ++)
	{			
		total += weights[i]*getYValue(i,H,theta);
	}	
	return sqrt(H)*A*PI2*total;
}

 double IntegratorFast::getYValue(int x, double H, double theta)
{	
	double kf_sqF_tan0 = KF_CONV * sqrt(F) * tan_0;
	double inv_H_Cos0 = 1/(H*cos_0);
	return exp(-OSC_CONST*Td*m*inv_H_Cos0)*(OSC_CONST*T*m*inv_H_Cos0)/sinh(OSC_CONST*T*m*inv_H_Cos0)*sin(PI2*((F+dF*cos_vals[x]*besselJ_C(kf_sqF_tan0) + dF2*cos2_vals[x]*besselJ_C(2*kf_sqF_tan0))*inv_H_Cos0-phi));

}

 double IntegratorFast::besselJ_C(double _x)
{
	double total = 0;
	double x_pow = 1;
	int i = 0;	
	do
	{
		total += coeffs[i]*x_pow;
		x_pow *= _x;
		i++;
	}
	while(i < n_coeffs);

	return total;
}

void IntegratorFast::changeParams(double _F,double _dF,double _dF2, double _phi,double _A,double _T,double _Td, double _m)
{
	F = _F;
	dF = _dF;
	dF2 = _dF2;
	phi = _phi;	
	A = _A;
	T = _T;
	Td = _Td;
	m = _m;
}

